services:
  postgres:
    image: 'postgres:11.1-alpine'
    container_name: buscacreci_postgres
    restart: unless-stopped
    working_dir: /application
    volumes:
      - './:/application'
      - './docker/postgres/pg-config:/etc/postgresql'
      - './docker/postgres/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql'
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_DB=${DB_DATABASE}
    ports:
      - 8043:5432
    networks:
      - buscacreci_network

  api:
    image: 'nginx:alpine'
    container_name: buscacreci_nginx_api
    working_dir: /application
    depends_on:
      - postgres
    volumes:
      - './:/application'
      - './docker/nginx/nginx_api.conf:/etc/nginx/conf.d/default.conf'
      - './src:/application/src:rw'
    ports:
      - '8053:80'
    networks:
      - buscacreci_network

  laucher-queue:
    build: ./docker/php-fpm # Use o Dockerfile para construir a imagem
    command: php src/Infraestrutura/Workers/laucher.php # Comando para iniciar o worker
    volumes:
      - './:/application' # Mapeie o código-fonte para o contêiner
    depends_on:
      - rabbitmq-master # Certifique-se de que o RabbitMQ esteja disponível antes de iniciar o worker
    deploy:
      replicas: 1 # Número inicial de réplicas
    networks:
      - buscacreci_network

  worker-email:
    build: ./docker/php-fpm # Use o Dockerfile para construir a imagem
    command: php src/Infraestrutura/Workers/Email/index.php # Comando para iniciar o worker
    volumes:
      - './:/application' # Mapeie o código-fonte para o contêiner
    depends_on:
      - laucher-queue
      - rabbitmq-master # Certifique-se de que o RabbitMQ esteja disponível antes de iniciar o worker
    deploy:
      replicas: 3 # Número inicial de réplicas
    networks:
      - buscacreci_network

  worker-consulta-creci:
    build: ./docker/php-fpm # Use o Dockerfile para construir a imagem
    command: php src/Infraestrutura/Workers/ConsultaCreci/index.php # Comando para iniciar o worker
    volumes:
      - './:/application' # Mapeie o código-fonte para o contêiner
    depends_on:
      - laucher-queue
      - rabbitmq-master # Certifique-se de que o RabbitMQ esteja disponível antes de iniciar o worker
    deploy:
      replicas: 3 # Número inicial de réplicas
    networks:
      - buscacreci_network

  php-fpm:
    build: ./docker/php-fpm
    container_name: buscacreci_php
    working_dir: /application
    depends_on:
      - postgres
    volumes:
      - './:/application'
      - './docker/php-fpm/php-ini-overrides.ini:/etc/php/8.3/fpm/conf.d/99-overrides.ini'
    networks:
      - buscacreci_network
    environment:
      - DB_HOST=${DB_CONNECTION}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

  rabbitmq-master:
    image: rabbitmq:3.8-management-alpine
    hostname: rabbitmq-master
    restart: unless-stopped
    ports:
      - "1${EVENT_BUS_PORT}:1${EVENT_BUS_PORT}"
      - "${EVENT_BUS_PORT}:${EVENT_BUS_PORT}"
      - "15692:15692"
    volumes:
      - './docker/rabbitmq:/var/lib/rabbitmq'
    networks:
      - buscacreci_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  rabbitmq-slave:
    image: rabbitmq:3.8-management-alpine
    hostname: rabbitmq-slave
    restart: unless-stopped
    volumes:
      - './docker/rabbitmq:/var/lib/rabbitmq'
    networks:
      - buscacreci_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost", "${EVENT_BUS_PORT}" ]
      interval: 5s
      timeout: 15s
      retries: 1
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
networks:
  buscacreci_network:

volumes:
  pg-data:
  pg-config:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/./docker/postgres"
